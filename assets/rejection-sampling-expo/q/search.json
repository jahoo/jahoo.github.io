[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sampling and sentence processing",
    "section": "",
    "text": "\\global\\def\\I#1{\\operatorname{I}(#1)}\n\\global\\def\\H#1{\\operatorname{H}(#1)}\n\\global\\def\\surp#1{\\operatorname{surp}(#1)}\n\\global\\def\\DIV#1#2#3#4{\\operatorname{D_{#1}}(#3#2#4)}\n\\global\\def\\KL#1#2{\\DIV{KL}\\|{#1}{#2}}\n\\global\\def\\EE{\\operatorname*{\\mathbb{E}}}\n\\global\\def\\EEE#1#2{\\operatorname*{\\mathbb{E}}_{#1}\\left[#2\\right]}\n\\global\\def\\dee{\\mathop{\\mathrm{d}\\!}}\n\\global\\def\\var#1{\\operatorname{\\mathbb{V}}(#1)}\n\\global\\def\\Var#1#2{\\operatorname{\\mathbb{V}}\\!\\!{}_{#1}(#2)}\n\\global\\def\\indep{\\bot\\!\\!\\!\\bot}\n\\global\\def\\uu{\\breve u}"
  },
  {
    "objectID": "index.html#notebooks-on-various-topics",
    "href": "index.html#notebooks-on-various-topics",
    "title": "sampling and sentence processing",
    "section": "./notebooks on various topics",
    "text": "./notebooks on various topics\n\n\n\n\n\nRejection sampling\n\n\nThe rejection sampling algorithm, and how guess-and-check is a special case.\n\n\n\n\n\nAug 29, 2022\n\n\n1/24/25, 2:09:42 PM\n\n\n\n\n\n\n\nLiterature review\n\n\nparsing, sampling, and linguistic phenomena\n\n\n\n\n\n1/22/25, 5:13:30 PM\n\n\n\n\n\n\n\nbiased coin\n\n\nSimulating a (biased) coin using another (maybe biased) coin\n\n\n\n\n\nSep 1, 2023\n\n\n1/22/25, 4:43:02 PM\n\n\n\n\n\n\n\nDifficulty and surprisal\n\n\n\n\n\n\n\n\n1/22/25, 4:04:39 PM\n\n\n\n\n\n\n\nDensity of transformed random variable\n\n\n\n\n\n\n\n\nNov 2, 2022\n\n\n12/16/24, 4:05:49 PM\n\n\n\n\n\n\n\ninteractive KL and surprisal decomposition\n\n\n\n\n\n\n\n\nJan 24, 2025\n\n\n10/19/23, 3:16:09 PM\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#notes-on-particular-papers",
    "href": "index.html#notes-on-particular-papers",
    "title": "sampling and sentence processing",
    "section": "./notes on particular papers",
    "text": "./notes on particular papers\n\n\n\n\n\nNotes on Resource-rational surprisal\n\n\nA resource-rational model of human processing of recursive linguistic structure\n\n\n\n\n\nNov 1, 2022\n\n\n1/22/25, 4:49:10 PM\n\n\n\n\n\n\n\nNotes on SMC for LLMs\n\n\nSequential Monte Carlo Steering of Large Language Models using Probabilistic Programs\n\n\n\n\n\nAug 1, 2023\n\n\n10/24/24, 6:04:48 PM\n\n\n\n\n\n\n\nHarmonic mean estimator\n\n\n\n\n\n\n\n\n9/30/24, 7:29:06 PM\n\n\n\n\n\n\n\nNotes on GCN parsing\n\n\nStrongly Incremental Constituency Parsing with Graph Neural Networks \n\n\n\n\n\nJan 1, 2021\n\n\n5/18/22, 11:55:44 AM\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#logs",
    "href": "index.html#logs",
    "title": "sampling and sentence processing",
    "section": "logs",
    "text": "logs\n\n\n\n\n\nKL theory and noisy surprisal\n\n\nBranch off of processing-surprisal.md\n\n\n\n\n\n1/22/25, 5:05:49 PM\n\n\n\n\n\n\n\nPlausibility of sampling nonlinear surprisal project\n\n\nContinuation of eval2/log.md\n\n\n\n\n\nJan 24, 2025\n\n\n1/22/25, 4:49:41 PM\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": "sampling and sentence processing",
    "section": "slides",
    "text": "slides\n\n\n\n\n\nTitle\n\n\nSubtitle\n\n\n\n\n\n1/22/25, 5:09:49 PM\n\n\n\n\n\n\n\nIllusions etc\n\n\nconstructions that are unexpectedly easy to process\n\n\n\n\n\n1/22/25, 4:49:10 PM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1/21/25, 7:28:03 PM\n\n\n\n\n\n\n\nWhen unpredictable doesn’t mean difficult\n\n\nTesting a belief-update theory of processing cost\n\n\n\n\n\nJan 24, 2025\n\n\n7/10/24, 12:53:00 PM\n\n\n\n\n\n\n\n△\n\n\n\n\n\n\n\n\n7/8/24, 11:11:05 AM\n\n\n\n\n\n\n\nwhen does unpredictable not mean difficult?\n\n\ntesting a belief-update theory of processing cost\n\n\n\n\n\nDec 1, 2023\n\n\n12/1/23, 2:01:10 PM\n\n\n\n\n\n\n\nwhen unpredictable \\ne difficult\n\n\ntesting a belief-divergence theory of processing cost\n\n\n\n\n\nNov 21, 2023\n\n\n11/21/23, 4:27:48 PM\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#other",
    "href": "index.html#other",
    "title": "sampling and sentence processing",
    "section": "other",
    "text": "other\n\n\n\n\n\nBayesian incremental parsing\n\n\nMaking a formal framework\n\n\n\n\n\n1/22/25, 5:07:57 PM\n\n\n\n\n\n\n\nSampling-based processing\n\n\nDissertation proposal\n\n\n\n\n\nJun 27, 2022\n\n\n1/22/25, 4:52:06 PM\n\n\n\n\n\n\n\nA noisy-channel LM\n\n\nan idea for modelling noisy production\n\n\n\n\n\nOct 25, 2022\n\n\n1/22/25, 4:49:10 PM\n\n\n\n\n\n\n\nKL(P||Q) idea\n\n\n\n\n\n\n\n\nJan 24, 2025\n\n\n1/22/25, 4:49:10 PM\n\n\n\n\n\n\n\nWhy surprising doesn’t always mean difficult to process\n\n\n\n\n\n\n\n\nJan 24, 2025\n\n\n1/22/25, 4:49:10 PM\n\n\n\n\n\n\n\nRAVI notes\n\n\n\n\n\n\n\n\nJun 6, 2024\n\n\n1/22/25, 4:48:40 PM\n\n\n\n\n\n\n\nParticles parsing\n\n\nbuilding an SMC parsing model\n\n\n\n\n\n1/22/25, 4:47:51 PM\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "notebooks/rejection-sampling-expo.html",
    "href": "notebooks/rejection-sampling-expo.html",
    "title": "Rejection sampling",
    "section": "",
    "text": "\\global\\def\\I#1{\\operatorname{I}(#1)}\n\\global\\def\\H#1{\\operatorname{H}(#1)}\n\\global\\def\\surp#1{\\operatorname{surp}(#1)}\n\\global\\def\\DIV#1#2#3#4{\\operatorname{D_{#1}}(#3#2#4)}\n\\global\\def\\KL#1#2{\\DIV{KL}\\|{#1}{#2}}\n\\global\\def\\EE{\\operatorname*{\\mathbb{E}}}\n\\global\\def\\EEE#1#2{\\operatorname*{\\mathbb{E}}_{#1}\\left[#2\\right]}\n\\global\\def\\dee{\\mathop{\\mathrm{d}\\!}}\n\\global\\def\\var#1{\\operatorname{\\mathbb{V}}(#1)}\n\\global\\def\\Var#1#2{\\operatorname{\\mathbb{V}}\\!\\!{}_{#1}(#2)}\n\\global\\def\\indep{\\bot\\!\\!\\!\\bot}\n\\global\\def\\uu{\\breve u}"
  },
  {
    "objectID": "notebooks/rejection-sampling-expo.html#definitions",
    "href": "notebooks/rejection-sampling-expo.html#definitions",
    "title": "Rejection sampling",
    "section": "1 Definitions",
    "text": "1 Definitions\nRejection sampling1 is an algorithm for obtaining samples from some target density (which is hard to sample from directly), using a proposal distribution, which can be sampled from. The algorithm defines a scheme for uniformly sampling from the area under the target density.\n1 As defined in, for example, MacKay (2003, sec. 29.3) or Bishop (2006, sec. 11.1.2), or Chopin and Papaspiliopoulos (2020, Algorithm 8.1)2 As in e.g., Freer, Mansinghka, and Roy (2010), and probably other placesAnother algorithm, which I’ll call the simple guess-and-check algorithm, is sometimes also referred to as rejection sampling.2 This algorithm is for obtaining samples from a conditional distribution, by sampling from the joint. The algorithm draws samples iteratively from a distribution, and rejects them until one is drawn which satisfies a predefined condition.\nThese two algorithms have slightly different goals and requirements, and are described explicitly below. The second is in fact a special case of the first. But because the setup is so different, the relationship between them is perhaps not obvious at first glance.\n\n\n\n\n\n\nRejection sampling algorithm\n\n\n\n\nGoal: to sample from an arbitrary distribution z\\sim \\pi(Z).\nRequirements:\n\nyou must be able to evaluate \\pi^\\ast(z) \\propto \\pi(z), (that is you can score \\pi up to a normalizing constant)\nyou have some proposal distribution q from which you can sample, whose support contains the support of \\pi.\n\nAlgorithm:\n\nchoose k such that \\forall z\\ kq(z) \\ge \\pi^*(z).\nsample z_0\\sim q\nsample u\\sim \\operatorname{Unif}([0,kq(z_0)])\nif u\\le \\pi^*(z_0) then accept, else start over from 2.\nreturn z_0\n\n\nIllustration in Figure 1.\n\n\n\n\n\n\n\n\nGuess-and-check sampling algorithm\n\n\n\n\nGoal: to sample subject to a condition. That is, to sample z\\sim p(Z\\mid f(Z)=\\texttt{True}), where Z is some random variable, and f(Z) is a deterministic predicate of Z, which must be true for the sample to be accepted.\nRequirements:\n\nyou must be able to sample from the unconditioned distribution p(Z)\nyou must be able to evaluate f(z) for all z, to check the condition is met\n\nAlgorithm:\n\nsample z_0\\sim p(Z)\nif f(z_0)=\\texttt{True} then accept, else start over from 1.\nreturn z_0"
  },
  {
    "objectID": "notebooks/rejection-sampling-expo.html#demonstrations",
    "href": "notebooks/rejection-sampling-expo.html#demonstrations",
    "title": "Rejection sampling",
    "section": "2 Demonstrations",
    "text": "2 Demonstrations\nLet’s look at some examples. First I’ll load some packages and define a plotting function to use below.\n\n\nShow/hide code\nusing Distributions, Plots, StatsPlots, LaTeXStrings\nimport IntervalUnionArithmetic: interval, ∪\nimport StatsBase: fit, Histogram\nimport LinearAlgebra: normalize\n\n\"\"\"\nPlot the target, proposal, and scaled proposal for the rejection sampling setup. \nOptionally also plot the acceptance probability.\n\"\"\"\nfunction plot_rejection_sampling_setup(;\n    target_density, proposal_distribution::Distribution,\n    title=\"Rejection sampling setup\",\n    subtitle=\"Target, proposal, and scaled proposal\",\n    xmin=-15, xmax=115, size=(650, 325), xresolution=1000, fmt=:svg,\n    plot_accept_prob=false\n)\n    x = xmin:(xmax-xmin)/xresolution:xmax\n    p(x) = target_density(x)\n    q(x) = pdf(proposal_distribution, x)\n    # Define the weight function\n    w = x -&gt; p(x) / q(x)\n    # k is the constant by which to multiply q so it upperbounds p\n    k = maximum(w.(xmin:xmax))\n\n    p1 = plot(x, [p.(x) q.(x) k * q.(x)],\n        xlabel=L\"x\",\n        label=[L\"target: $\\pi^{\\ast}(x)$\" L\"proposal: $q(x)$\" L\"$k\\cdot q(x)$\"],\n        ls=[:dash :solid :dashdot], color=[:green :purple :purple], linewidth=[4 2 4],\n        alpha=[0.4 0.5 0.5], fmt=fmt)\n    plot!(p1, x, [(0 .* x) p.(x)], fillrange=[p.(x) (k * q.(x))],\n        lw=0, fillalpha=[0.20 0.15], lab=[\"accept region\" \"reject region\"], c=[:darkgreen :darkred],\n        legend_position=:topleft)\n    if plot_accept_prob\n        plot!(p1, title=subtitle)\n        p2 = plot(x, (x -&gt; p(x) / (k * q(x))).(x),\n            xlabel=L\"x\", label=nothing,\n            title=L\"accept probability: $p(x)/k\\cdot q(x)$\",\n            ls=:solid, color=:black, linewidth=1,\n            alpha=0.75, fmt=fmt)\n        plot(p1, p2, layout=grid(2, 1, heights=[2 / 3, 1 / 3]),\n            plot_title=title,\n            plot_titlelocation=:left, titlelocation=:left,\n            plot_titlefontsize=11, titlefontsize=9, size=(size[1], (3 / 2) * size[2]))\n    else\n        plot(p1,\n            plot_title=title * \": \" * subtitle,\n            plot_titlelocation=:left, titlelocation=:left,\n            plot_titlefontsize=11, titlefontsize=9, size=size)\n    end\nend;\n\n\"\"\"\nRun the rejection sampling algorithm, and plot the rejection sampling estimate.\n\n# Arguments\n- `target_density`: Function representing the target density to sample from\n- `proposal_distribution::Distribution`: Distribution to draw proposal samples from\n- `N::Integer`: Number of samples to draw\n- `rejection_sampler`: Function implementing the rejection sampling algorithm\n- `Z::Float64=1.0`: Normalization constant for histogram \n    (optional: to make the histogram same scale as density plot, set Z to normalizing constant of target_density)\n\"\"\"\nfunction plot_rejection_sampling_estimate(;\n    target_density, proposal_distribution::Distribution, N::Integer=1000, \n    rejection_sampler = rejection_sample_N_times,\n    Z=1.0,\n    title=\"Rejection sampling estimate of target density\",\n    bins=100, \n    xmin=-15, xmax=115, size=(650, 325), xresolution=1000, fmt=:svg\n)\n    x = xmin:(xmax-xmin)/xresolution:xmax\n    q(x) = pdf(proposal_distribution, x)\n    # Define the weight function as the ratio of target to proposal densities\n    w(x) = target_density(x) / q(x)\n    # k is the constant by which to multiply q so it upperbounds p\n    k = maximum(w.(xmin:xmax))\n    samples, (N_attempt, N_success) = rejection_sampler(\n        target_density=target_density, proposal_distribution=proposal_distribution, N=N)\n    pct_success = round(N_success / N_attempt, digits=2)\n    plot(x, [target_density.(x) q.(x)],\n        xlabel=L\"x\", legend=:topleft,\n        label=[L\"target: $\\pi^{\\ast}(x)$\" L\"proposal: $q(x)$\"],\n        ls=[:dash :solid], color=[:green :purple], linewidth=[4 2], alpha=[0.4 0.5],\n        plot_title=title, plot_titlelocation=:left, titlelocation=:left,\n        plot_titlefontsize=11, titlefontsize=9,\n        title=\"accepted $N_success/$N_attempt\" * \" = $pct_success%\",\n        size=size, fmt=fmt\n    )\n    h = fit(Histogram{Float64}, samples, nbins=bins) |&gt; normalize\n    h.weights .*= Z\n    plot!(h; α=0.20, label=\"estimate\", lw=0, color=:darkgreen)\n    # makes a scaled version of this:\n    # histogram!(samples, normalize=true, α=0.2, label=\"estimate\", bins=bins, lw=0)\nend;\n\n\n\n2.1 Rejection sampling\nLet’s define a concrete proposal distribution and target density to use as an example,\n\n\nShow/hide code\n# Define a proposal distribution Q\nQ = Normal(55, 30) # the proposal density is q(x) = pdf(Q,x)\n\n# Define a target density \n# note, this example is in fact a pdf (which is normalized and we can sample from), but it needn't be\nP = MixtureModel([Normal(20, 10), Chisq(60), Normal(92, 4)], [0.3, 0.67, 0.03])\nπstar(x) = pdf(P, x);  # target density\n\n\nand look at a plot of these:\n\n\nShow/hide code\nplot_rejection_sampling_setup(target_density=πstar, proposal_distribution=Q, plot_accept_prob=true)\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\nFigure 1: A setup for rejection sampling. Samples are to be drawn from the proposal distribution, and accepted or rejected according to the ratio of the target density to the scaled proposal density.\n\n\n\n\n\nthe proposal distribution Q is a normal distribution \\mathcal{N}(\\mu=55, \\sigma^2=30), which we can sample from.\nthe target density p is something more complicated (in this example, we can of course sample from the mixture distribution used to define p, but the point is we don’t need to be able to, in principle this density could not correspond to something we know how to sample from).\n\n\n\nSimulation\nHere is some code which implements the rejection sampling algorithm.\n\n\nShow/hide code\n\"\"\"\nRun the rejection sampling algorithm to estimate `target_density` by sampling \n`N` times from `proposal_distribution`.\nNote, to prevent infinite looping, this version of the algorithm doesn't start\nover if the sample is not accepted, so only n ≤ `N` accepted samples are returned.\n\"\"\"\nfunction rejection_sample_N_times(;\n    target_density, proposal_distribution::Distribution, N::Integer,\n    xmin=-10, xmax=110\n)\n    p(x) = target_density(x)\n    q(x) = pdf(proposal_distribution, x)\n    w(x) = p(x) / q(x)\n    # k is the constant by which to multiply q so it upper-bounds p\n    k = maximum(w.(xmin:xmax))\n    xs = rand(proposal_distribution, N)\n    us = rand(Uniform(0, 1), N)\n    whether_accept(x, u) = target_density(x) / (k * q(x)) &gt; u\n    samples = xs[whether_accept.(xs, us)]\n    return samples, (N_attempt=N, N_success=length(samples))\nend;\n\n\nTo see the estimate resulting from these rejection sampling examples, let’s make a histogram of the accepted samples resulting from sampling N times from the proposal:\n\n\nShow/hide code\nplot_rejection_sampling_estimate(target_density=πstar, proposal_distribution=Q)\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\nFigure 2: Simulation of rejection sampling setup in Figure 1.\n\n\n\n\n\n\n\n\n\n\nWhat about a different proposal?\n\n\n\n\n\nThe proposal above is relatively good (it’s similar enough to the target, so a healthy proportion of the samples were accepted). What if the proposal were a worse fit to the target?\n\n\nShow/hide code\n# Define a \"bad\" proposal distribution (badly matched to the target)\nQ_bad = MixtureModel([Normal(60, 50), Normal(37, 4), Normal(90, 3)], [0.4, 0.3, 0.3])\n\nplot_rejection_sampling_estimate(target_density=πstar, proposal_distribution=Q_bad)\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\nFigure 3: Simulation of rejection sampling setup with a worse proposal distribution.\n\n\n\n\nwith a worse proposal, we can see it will require more samples from the proposal to get a good estimate.\n\n\n\n\n\n2.2 The guess-and-check algorithm, a special case\nGuessing repeatedly (from a prior distribution) and only accepting when some condition about the sample is met is a special case of the rejection sampling algorithm, though this isn’t immediately obvious the way it is usually described. To see how this is so let’s make a target density that is equal to the proposal density wherever a condition is met, and zero elsewhere (we’ll be guessing from the proposal distribution Q, and accepting iff the condition condition is met).\nWe’ll set our target density to simply be equal to the proposal density when the condition is met, and zero otherwise. The condition I’ll use for this example is just whether the sampled real number is in a specified couple of intervals.\n\n\nShow/hide code\n# Make a target density that equals pdf(Q) only on a chosen intervals, and zero elsewhere\nintervals = interval(12, 25) ∪ interval(50, 70) # the intervals to accept on\ncondition(x) = x ∈ intervals\nspecial_πstar(x) = condition(x) ? pdf(Q, x) : 0\n# Note, this density is _not_ normalized.\n# If we wanted to normalize this, we could calculate the normalizing constant\nZ = sum(cdf(Q, i.hi) - cdf(Q, i.lo) for i in intervals.v)\n# and we could scale the density to make it a pdf, if we wanted\n# special_π_normalized(x) =  special_πstar(x) * 1/Z \n\nplot_rejection_sampling_setup(target_density=special_πstar, proposal_distribution=Q,\n    title=\"Rejection sampling setup\", subtitle=\"case when target = proposal where nonzero\",\n    plot_accept_prob=true)\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\nFigure 4: Special case of rejection sampling where the target is equal to the proposal everywhere in the support of the proposal, and is zero elsewhere.\n\n\n\n\nTo see precisely how the simple guess-and-check rejection sampling scheme is a special case of the rejection sampling algorithm (see Figure 4, to compare with Figure 1)\n\nlet \\pi(z) \\coloneqq p(z\\mid f(z)=\\texttt{True})\nlet \\pi^\\ast(z) \\coloneqq \\scriptsize\\begin{cases}p(z)&\\text{if }f(z)=\\texttt{True}\\\\0&\\text{else}\\end{cases}\nlet q(z) \\coloneqq p(z)\n\nLetting k=1, it holds that \\forall z,\\ kq(z)\\ge \\pi^\\ast(z). In fact, we have that q(z)=\\pi^\\ast(z) for all z in the support of \\pi^\\ast.\nThis means that the step 3 of the rejection sampling algorithm (sampling from the uniform distribution) is unnecessary. We would be guaranteed that u\\le \\pi^\\ast(z_0), whenever z_0 \\in support of \\pi^\\ast. So we just need to check whether \\pi^\\ast(z_0) &gt; 0 (that is, check whether f(x)=\\texttt{True}).\n\n\n\n\n\n\nNote\n\n\n\nOne important difference between these two definitions of rejection sampling is that in the special case we actually don’t need to know how to evaluate/score the density \\pi^*. This is important in practice, if we have a proposal process we can obtain samples from (and check whether they satisfy a condition), but we don’t have any way of obtaining scores. In this case guess-and-check is still possible, while the rejection sampling algorithm in general is not.\n\n\n\n\nShow/hide code\nplot_rejection_sampling_estimate(target_density=special_πstar, proposal_distribution=Q, Z=Z)\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\nFigure 5: Simulation of special case of rejection sampling setup in Figure 4. This corresponds to guessing from the normal distribution and rejecting unless the sample falls in the specified couple of intervals.\n\n\n\n\n\n\n\n\n\n\nWhat about sampling until success?\n\n\n\n\n\nThe version of the algorithm we’ve been using just samples N times from the proposal, and accepts some proportion of them.\nAnother way we might want our algorithm to behave would be sampling from the proposal however many times are needed to get N accepted samples. Here is such a modified algorithm, and our examples above run using it.\nIn this sample-until-success version of the algorithm, it is computationally costly to use a bad proposal.\n\n\nShow/hide code\n\"\"\"\nRun the rejection sampling algorithm to estimate `target_density` \nby sampling from `proposal_distribution` until `N` samples are accepted.\nNote, this version of the algorithm may run indefinitely long if the proposal is bad.\n\"\"\"\nfunction rejection_sample_until_N_successes(;\n    target_density, proposal_distribution::Distribution, N::Integer,\n    xmin=-10, xmax=110\n)\n    p(x) = target_density(x)\n    q(x) = pdf(proposal_distribution, x)\n    w(x) = p(x) / q(x)\n    # k is the constant by which to multiply q so it upper-bounds p\n    k = maximum(w.(xmin:xmax))\n\n    samples = Float64[]\n    N_attempt = 0\n    while length(samples) &lt; N\n        N_attempt += 1\n        x = rand(proposal_distribution)\n        target_density(x) / (k * q(x)) &gt; rand() && push!(samples, x)\n    end\n\n    return samples, (N_attempt=N_attempt, N_success=N)\nend;\n\n\n\n\nShow/hide code\nplot_rejection_sampling_estimate(\n    target_density=πstar, proposal_distribution=Q, \n    rejection_sampler=rejection_sample_until_N_successes)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\nShow/hide code\nplot_rejection_sampling_estimate(\n    target_density=πstar, proposal_distribution=Q_bad, \n    rejection_sampler=rejection_sample_until_N_successes)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\nShow/hide code\nplot_rejection_sampling_estimate(\n    target_density=special_πstar, proposal_distribution=Q, Z=Z, \n    rejection_sampler=rejection_sample_until_N_successes)"
  }
]